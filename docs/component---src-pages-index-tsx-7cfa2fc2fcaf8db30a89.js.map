{"version":3,"file":"component---src-pages-index-tsx-7cfa2fc2fcaf8db30a89.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/SearchBar.tsx","webpack://gatsby-starter-default/./src/components/TravelRecommendations.tsx","webpack://gatsby-starter-default/./src/components/Promotions.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/SearchBar.tsx\r\n\r\nimport React, { useState, FormEvent } from 'react'\r\nimport { navigate } from 'gatsby'\r\n\r\nconst SearchBar: React.FC = () => {\r\n  const [searchTerm, setSearchTerm] = useState('')\r\n\r\n  const handleSearch = (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault()\r\n    if (searchTerm.trim()) {\r\n      navigate(`/search?q=${encodeURIComponent(searchTerm.trim())}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSearch}>\r\n      <input\r\n        type=\"text\"\r\n        value={searchTerm}\r\n        onChange={(e) => setSearchTerm(e.target.value)}\r\n        placeholder=\"搜索目的地、酒店、航班、活動...\"\r\n        aria-label=\"搜索\"\r\n      />\r\n      <button type=\"submit\">搜索</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default SearchBar","// src/components/TravelRecommendations.tsx\r\n\r\nimport React from 'react'\r\nimport { useStaticQuery, graphql, Link } from 'gatsby'\r\n\r\ninterface Destination {\r\n  id: string\r\n  name: string\r\n  slug: string\r\n}\r\n\r\ninterface QueryData {\r\n  allDestination: {\r\n    nodes: Destination[]\r\n  }\r\n}\r\n\r\nconst TravelRecommendations: React.FC = () => {\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allDestination(sort: {popularity: DESC}, limit: 5) {\r\n        nodes {\r\n          id\r\n          name\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const destinations = data.allDestination.nodes\r\n\r\n  return (\r\n    <section>\r\n      <h2>熱門目的地推薦</h2>\r\n      {destinations.length > 0 ? (\r\n        <ul>\r\n          {destinations.map((destination) => (\r\n            <li key={destination.id}>\r\n              <Link to={`/destination/${destination.slug}`}>{destination.name}</Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>目前沒有熱門目的地推薦。</p>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TravelRecommendations","// src/components/Promotions.tsx\r\n\r\nimport React from 'react'\r\nimport { useStaticQuery, graphql, Link } from 'gatsby'\r\n\r\ninterface Promotion {\r\n  id: string\r\n  title: string\r\n  description: string\r\n  slug: string\r\n}\r\n\r\ninterface QueryData {\r\n  allPromotion: {\r\n    nodes: Promotion[]\r\n  }\r\n}\r\n\r\nconst Promotions: React.FC = () => {\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allPromotion(limit: 3, sort: {startDate: ASC}) {\r\n        nodes {\r\n          id\r\n          title\r\n          description\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const promotions = data.allPromotion.nodes\r\n\r\n  return (\r\n    <section>\r\n      <h2>當前優惠活動</h2>\r\n      {promotions.length > 0 ? (\r\n        promotions.map((promotion) => (\r\n          <article key={promotion.id}>\r\n            <h3>\r\n              <Link to={`/promotion/${promotion.slug}`}>{promotion.title}</Link>\r\n            </h3>\r\n            <p>{promotion.description}</p>\r\n          </article>\r\n        ))\r\n      ) : (\r\n        <p>目前沒有進行中的優惠活動。</p>\r\n      )}\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Promotions","// src/pages/index.tsx\r\n\r\nimport React from 'react'\r\nimport { graphql, HeadFC, PageProps } from 'gatsby'\r\nimport Layout from '../components/Layout'\r\nimport seo from '../components/seo'\r\nimport SearchBar from '../components/SearchBar'\r\nimport TravelRecommendations from '../components/TravelRecommendations'\r\nimport Promotions from '../components/Promotions'\r\n\r\ninterface SiteMetadata {\r\n  title: string\r\n  description: string\r\n}\r\n\r\ninterface HomePageData {\r\n  site: {\r\n    siteMetadata: SiteMetadata\r\n  }\r\n}\r\n\r\ntype HomePageProps = PageProps<HomePageData>\r\n\r\nconst HomePage: React.FC<HomePageProps> = ({ data }) => {\r\n  const { title } = data.site.siteMetadata\r\n\r\n  return (\r\n    <Layout>\r\n      <h1>Welcome to our travel website</h1>\r\n      <h2>{title}</h2>\r\n      <SearchBar />\r\n      <TravelRecommendations />\r\n      <Promotions />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default HomePage\r\n\r\nexport const Head: HeadFC<HomePageData> = ({ data }) => (\r\n  <seo title={data.site.siteMetadata.title} description={data.site.siteMetadata.description} />\r\n)\r\n\r\nexport const query = graphql`\r\n  query HomePageQuery {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n      }\r\n    }\r\n  }\r\n`"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","SearchBar","searchTerm","setSearchTerm","onSubmit","e","preventDefault","trim","navigate","encodeURIComponent","type","onChange","target","placeholder","TravelRecommendations","destinations","useStaticQuery","allDestination","nodes","length","destination","key","Link","to","slug","name","Promotions","promotions","allPromotion","promotion","title","description","data","site","siteMetadata","Layout","Head","_ref2"],"sourceRoot":""}
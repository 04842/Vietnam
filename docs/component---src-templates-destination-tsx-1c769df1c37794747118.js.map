{"version":3,"file":"component---src-templates-destination-tsx-1c769df1c37794747118.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/InteractiveMap.tsx","webpack://gatsby-starter-default/./src/components/TravelGuide.tsx","webpack://gatsby-starter-default/./src/components/LocalActivities.tsx","webpack://gatsby-starter-default/./src/components/LanguageCurrencySelector.tsx","webpack://gatsby-starter-default/./src/templates/destination.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/InteractiveMap.tsx\r\n\r\nimport React from 'react'\r\n\r\ninterface InteractiveMapProps {\r\n  location: {\r\n    latitude: number\r\n    longitude: number\r\n  }\r\n}\r\n\r\nconst InteractiveMap: React.FC<InteractiveMapProps> = ({ location }) => {\r\n  return (\r\n    <div style={{ height: '400px', width: '100%', display: 'flex', alignItems: 'center', justifyContent: 'center', backgroundColor: '#f0f0f0' }}>\r\n      <p>此處曾經有一個地圖，坐標為：[{location.latitude}, {location.longitude}]</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InteractiveMap","// src/components/TravelGuide.tsx\r\n\r\nimport React from 'react'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\ninterface TravelGuideProps {\r\n  destinationName: string\r\n}\r\n\r\ninterface TravelGuideData {\r\n  id: string\r\n  destinationName: string\r\n  threeDay: string\r\n  fiveDay: string\r\n}\r\n\r\ninterface QueryData {\r\n  allTravelGuide: {\r\n    nodes: TravelGuideData[]\r\n  }\r\n}\r\n\r\nconst TravelGuide: React.FC<TravelGuideProps> = ({ destinationName }) => {\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allTravelGuide {\r\n        nodes {\r\n          id\r\n          destinationName\r\n          threeDay\r\n          fiveDay\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const guide = data.allTravelGuide.nodes.find(\r\n    (guide) => guide.destinationName === destinationName\r\n  )\r\n\r\n  if (!guide) return null\r\n\r\n  return (\r\n    <section>\r\n      <h2>旅遊攻略</h2>\r\n      <h3>3日遊建議</h3>\r\n      <p>{guide.threeDay}</p>\r\n      <h3>5日遊建議</h3>\r\n      <p>{guide.fiveDay}</p>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default TravelGuide","// src/components/LocalActivities.tsx\r\n\r\nimport React from 'react'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\ninterface LocalActivitiesProps {\r\n  destinationName: string\r\n}\r\n\r\ninterface Activity {\r\n  name: string\r\n  description: string\r\n  date: string\r\n}\r\n\r\ninterface LocalActivity {\r\n  id: string\r\n  destinationName: string\r\n  activities: Activity[]\r\n}\r\n\r\ninterface QueryData {\r\n  allLocalActivity: {\r\n    nodes: LocalActivity[]\r\n  }\r\n}\r\n\r\nconst LocalActivities: React.FC<LocalActivitiesProps> = ({ destinationName }) => {\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allLocalActivity {\r\n        nodes {\r\n          id\r\n          destinationName\r\n          activities {\r\n            name\r\n            description\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const localActivities = data.allLocalActivity.nodes.find(\r\n    (activities) => activities.destinationName === destinationName\r\n  )\r\n\r\n  if (!localActivities) return null\r\n\r\n  return (\r\n    <section>\r\n      <h2>當地活動</h2>\r\n      <ul>\r\n        {localActivities.activities.map((activity) => (\r\n          <li key={activity.name}>\r\n            <h3>{activity.name}</h3>\r\n            <p>{activity.description}</p>\r\n            <p>日期：{activity.date}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default LocalActivities","// src/components/LanguageCurrencySelector.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\nconst LanguageCurrencySelector: React.FC = () => {\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setLanguage(e.target.value)\r\n    // 這裡可以添加更改網站語言的邏輯\r\n  }\r\n\r\n  const handleCurrencyChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setCurrency(e.target.value)\r\n    // 這裡可以添加更改貨幣的邏輯\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <select value={language} onChange={handleLanguageChange}>\r\n        <option value=\"zh-TW\">繁體中文</option>\r\n        <option value=\"en\">English</option>\r\n        <option value=\"ja\">日本語</option>\r\n      </select>\r\n      <select value={currency} onChange={handleCurrencyChange}>\r\n        <option value=\"TWD\">新台幣 (TWD)</option>\r\n        <option value=\"USD\">美元 (USD)</option>\r\n        <option value=\"JPY\">日圓 (JPY)</option>\r\n      </select>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LanguageCurrencySelector","// src/templates/destination.tsx\r\n\r\nimport React from 'react'\r\nimport { graphql, PageProps } from 'gatsby'\r\nimport Layout from '../components/Layout'\r\nimport seo from '../components/seo'\r\nimport InteractiveMap from '../components/InteractiveMap'\r\nimport TravelGuide from '../components/TravelGuide'\r\nimport LocalActivities from '../components/LocalActivities'\r\nimport LanguageCurrencySelector from '../components/LanguageCurrencySelector'\r\n\r\ninterface DestinationData {\r\n  markdownRemark: {\r\n    frontmatter: {\r\n      name: string\r\n      description: string\r\n      history: string\r\n      culture: string\r\n      location: {\r\n        latitude: number\r\n        longitude: number\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nconst DestinationPage: React.FC<PageProps<DestinationData>> = ({ data }) => {\r\n  const { frontmatter: destination } = data.markdownRemark\r\n\r\n  return (\r\n    <Layout>\r\n      <Seo title={destination.name} description={destination.description} />\r\n      <h1>{destination.name}</h1>\r\n      <p>{destination.description}</p>\r\n      <section>\r\n        <h2>歷史</h2>\r\n        <p>{destination.history}</p>\r\n      </section>\r\n      <section>\r\n        <h2>文化</h2>\r\n        <p>{destination.culture}</p>\r\n      </section>\r\n      <InteractiveMap location={destination.location} />\r\n      <TravelGuide destinationName={destination.name} />\r\n      <LocalActivities destinationName={destination.name} />\r\n      <LanguageCurrencySelector />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default DestinationPage\r\n\r\nexport const query = graphql`\r\n  query($id: String!, $slug: String!) {\r\n    markdownRemark(id: { eq: $id }, fields: { slug: { eq: $slug } }) {\r\n      frontmatter {\r\n        name\r\n        description\r\n        history\r\n        culture\r\n        location {\r\n          latitude\r\n          longitude\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","location","style","height","width","display","alignItems","justifyContent","backgroundColor","latitude","longitude","destinationName","guide","useStaticQuery","allTravelGuide","nodes","find","threeDay","fiveDay","localActivities","allLocalActivity","activities","activity","key","name","description","date","LanguageCurrencySelector","onChange","e","target","data","frontmatter","destination","markdownRemark","Layout","Seo","title","history","culture","InteractiveMap","TravelGuide","LocalActivities"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-account-login-tsx-8ee40f9d518398df12a6.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/pages/account/LoginForm.tsx","webpack://gatsby-starter-default/./src/pages/account/RegisterForm.tsx","webpack://gatsby-starter-default/./src/pages/account/login.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/account/LoginForm.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\ninterface LoginFormProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst LoginForm: React.FC<LoginFormProps> = ({ onSuccess }) => {\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    // 這裡應該實現實際的登入邏輯，包括與後端 API 的交互\r\n    console.log('登入:', { email, password })\r\n    // 假設登入成功\r\n    onSuccess()\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        placeholder=\"電子郵件\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"密碼\"\r\n        required\r\n      />\r\n      <button type=\"submit\">登入</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default LoginForm","// src/components/account/RegisterForm.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\ninterface RegisterFormProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst RegisterForm: React.FC<RegisterFormProps> = ({ onSuccess }) => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [password, setPassword] = useState('')\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    // 這裡應該實現實際的註冊邏輯，包括與後端 API 的交互\r\n    console.log('註冊:', { name, email, password })\r\n    // 假設註冊成功\r\n    onSuccess()\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        placeholder=\"姓名\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        placeholder=\"電子郵件\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"password\"\r\n        value={password}\r\n        onChange={(e) => setPassword(e.target.value)}\r\n        placeholder=\"密碼\"\r\n        required\r\n      />\r\n      <button type=\"submit\">註冊</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default RegisterForm","// src/pages/account/login.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { navigate } from 'gatsby'\r\nimport Layout from '../../components/Layout'\r\nimport seo from '../../components/seo'\r\nimport LoginForm from '../account/LoginForm'\r\nimport RegisterForm from '../account/RegisterForm'\r\n\r\nconst LoginPage: React.FC = () => {\r\n  const [isLogin, setIsLogin] = useState(true)\r\n\r\n  const handleSuccessfulAuth = () => {\r\n    // 在實際應用中，這裡應該設置用戶的登入狀態\r\n    navigate('/account/profile')\r\n  }\r\n\r\n  return (\r\n    <Layout>\r\n      <seo title={isLogin ? \"登入\" : \"註冊\"} description=\"登入或註冊您的帳戶\" />\r\n      <h1>{isLogin ? \"登入\" : \"註冊\"}</h1>\r\n      {isLogin ? (\r\n        <LoginForm onSuccess={handleSuccessfulAuth} />\r\n      ) : (\r\n        <RegisterForm onSuccess={handleSuccessfulAuth} />\r\n      )}\r\n      <button onClick={() => setIsLogin(!isLogin)}>\r\n        {isLogin ? \"還沒有帳戶？註冊\" : \"已有帳戶？登入\"}\r\n      </button>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default LoginPage"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","onSuccess","email","setEmail","password","setPassword","onSubmit","async","e","preventDefault","console","log","type","onChange","target","placeholder","required","name","setName","LoginPage","isLogin","setIsLogin","handleSuccessfulAuth","navigate","Layout","title","description","LoginForm","RegisterForm","onClick"],"sourceRoot":""}
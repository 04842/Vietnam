{"version":3,"file":"component---src-pages-account-profile-tsx-3197db7e715e7562f721.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/seo.tsx","webpack://gatsby-starter-default/./src/pages/account/OrderHistory.tsx","webpack://gatsby-starter-default/./src/pages/account/PointsAndCoupons.tsx","webpack://gatsby-starter-default/./src/pages/account/ProfileForm.tsx","webpack://gatsby-starter-default/./src/pages/account/profile.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/seo.tsx\r\n\r\nimport React from 'react'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\n\r\ninterface seoProps {\r\n  title: string\r\n  description?: string\r\n  lang?: string\r\n  meta?: Array<{ name: string; content: string }>\r\n  children?: React.ReactNode\r\n}\r\n\r\nconst seo: React.FC<seoProps> = ({ description, lang = 'zh-TW', meta = [], title, children }) => {\r\n  const { site } = useStaticQuery(\r\n    graphql`\r\n      query {\r\n        site {\r\n          siteMetadata {\r\n            title\r\n            description\r\n            author\r\n          }\r\n        }\r\n      }\r\n    `\r\n  )\r\n\r\n  const metaDescription = description || site.siteMetadata.description\r\n  const defaultTitle = site.siteMetadata?.title\r\n\r\n  return (\r\n    <>\r\n      <html lang={lang} />\r\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\r\n      <meta name=\"description\" content={metaDescription} />\r\n      <meta property=\"og:title\" content={title} />\r\n      <meta property=\"og:description\" content={metaDescription} />\r\n      <meta property=\"og:type\" content=\"website\" />\r\n      <meta name=\"twitter:card\" content=\"summary\" />\r\n      <meta name=\"twitter:creator\" content={site.siteMetadata?.author || ''} />\r\n      <meta name=\"twitter:title\" content={title} />\r\n      <meta name=\"twitter:description\" content={metaDescription} />\r\n      {meta.map((item, index) => (\r\n        <meta key={index} name={item.name} content={item.content} />\r\n      ))}\r\n      {children}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default seo","// src/components/account/OrderHistory.tsx\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\ninterface Order {\r\n  id: number;\r\n  date: string;\r\n  total: number;\r\n}\r\n\r\nconst OrderHistory: React.FC = () => {\r\n  const [orders, setOrders] = useState<Order[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchOrders = async () => {\r\n      try {\r\n        // 這裡應該從後端 API 獲取訂單歷史\r\n        // 假設的 API 調用\r\n        const data = await fetch('/api/order-history').then(res => res.json());\r\n        setOrders(data);\r\n      } catch (err) {\r\n        setError('無法載入訂單歷史。請稍後再試。');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchOrders();\r\n  }, []);\r\n\r\n  if (isLoading) return <div>加載中...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>訂單歷史</h2>\r\n      {orders.length > 0 ? (\r\n        <ul>\r\n          {orders.map(order => (\r\n            <li key={order.id}>\r\n              訂單 #{order.id} - 日期: {order.date} - 總金額: ${order.total}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>目前沒有訂單歷史。</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default OrderHistory","// src/components/account/PointsAndCoupons.tsx\r\n\r\nimport React, { useState, useEffect } from 'react'\r\n\r\ninterface Coupon {\r\n  id: number;\r\n  code: string;\r\n  discount: string;\r\n}\r\n\r\nconst PointsAndCoupons: React.FC = () => {\r\n  const [points, setPoints] = useState<number | null>(null);\r\n  const [coupons, setCoupons] = useState<Coupon[]>([]);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // 這裡應該從後端 API 獲取積分和優惠券信息\r\n        // 假設的 API 調用\r\n        const data = await fetch('/api/points-and-coupons').then(res => res.json());\r\n        setPoints(data.points);\r\n        setCoupons(data.coupons);\r\n      } catch (err) {\r\n        setError('無法載入數據。請稍後再試。');\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  if (isLoading) return <div>加載中...</div>;\r\n  if (error) return <div>{error}</div>;\r\n\r\n  return (\r\n    <div>\r\n      <h2>積分與優惠券</h2>\r\n      {points !== null && <p>您當前的積分: {points}</p>}\r\n      <h3>可用優惠券:</h3>\r\n      {coupons.length > 0 ? (\r\n        <ul>\r\n          {coupons.map(coupon => (\r\n            <li key={coupon.id}>\r\n              {coupon.code} - 折扣: {coupon.discount}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>目前沒有可用的優惠券。</p>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PointsAndCoupons","// src/components/account/ProfileForm.tsx\r\n\r\nimport React, { useState, FormEvent } from 'react'\r\n\r\ninterface ProfileData {\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n}\r\n\r\nconst ProfileForm: React.FC = () => {\r\n  const [profileData, setProfileData] = useState<ProfileData>({\r\n    name: '',\r\n    email: '',\r\n    phone: ''\r\n  });\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setProfileData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = async (e: FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    // 這裡應該實現實際的更新邏輯，包括與後端 API 的交互\r\n    console.log('更新資料:', profileData);\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>個人資料</h2>\r\n      {Object.entries(profileData).map(([key, value]) => (\r\n        <input\r\n          key={key}\r\n          type={key === 'email' ? 'email' : key === 'phone' ? 'tel' : 'text'}\r\n          name={key}\r\n          value={value}\r\n          onChange={handleChange}\r\n          placeholder={key.charAt(0).toUpperCase() + key.slice(1)}\r\n          required={key !== 'phone'}\r\n        />\r\n      ))}\r\n      <button type=\"submit\">更新資料</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ProfileForm","// src/pages/account/profile.tsx\r\n\r\nimport React from 'react'\r\nimport Layout from '../../components/Layout'\r\nimport Seo from '../../components/seo'  // 修正大小寫\r\nimport ProfileForm from '../account/ProfileForm'\r\nimport OrderHistory from '../account/OrderHistory'\r\nimport PointsAndCoupons from '../account/PointsAndCoupons'\r\n\r\nconst ProfilePage: React.FC = () => {\r\n  return (\r\n    <Layout>\r\n      <Seo title=\"個人資料\" description=\"管理您的個人資料和訂單\" />  {/* 修正大小寫 */}\r\n      <h1>個人資料</h1>\r\n      <ProfileForm />\r\n      <OrderHistory />\r\n      <PointsAndCoupons />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default ProfilePage"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","_site$siteMetadata","_site$siteMetadata2","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","name","content","property","author","item","index","key","OrderHistory","orders","setOrders","isLoading","setIsLoading","error","setError","useEffect","async","data","fetch","then","res","json","err","fetchOrders","length","order","date","total","PointsAndCoupons","points","setPoints","coupons","setCoupons","fetchData","coupon","code","discount","ProfileForm","profileData","setProfileData","email","phone","handleChange","e","target","onSubmit","preventDefault","console","log","Object","entries","type","onChange","placeholder","charAt","toUpperCase","slice","required","ProfilePage","Layout","Seo"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-blog-tsx-20a7c51652b6516f12be.js","mappings":"mLAaA,MAAMA,GAA0BC,EAAAA,EAAAA,oBAAuDC,GAG1EC,EAA8DC,IAAmB,IAAlB,SAAEC,GAAUD,EAGtF,MAAM,EAACE,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAAS,UACnC,EAACC,EAAS,EAACC,IAAeF,EAAAA,EAAAA,UAAS,OAEzC,OACEG,EAAAA,cAACX,EAAwBY,SAAQ,CAACC,MAAO,CAAEP,WAAUC,cAAaE,WAAUC,gBACzEL,EACgC,E,cCPvC,MAAMS,GAAsBb,EAAAA,EAAAA,oBAAmDC,GAElEa,EAA0DX,IAAmB,IAAlB,SAAEC,GAAUD,EAClF,MAAM,EAACY,EAAc,EAACC,IAAoBT,EAAAA,EAAAA,UAAyB,IAiBnE,OACEG,EAAAA,cAACG,EAAoBF,SAAQ,CAACC,MAAO,CAAEG,gBAAeE,gBAhB/BC,IACvB,MAAMC,EAAkB,IAAKD,EAAcE,GAAIC,KAAKC,MAAMC,WAAYC,MAAM,GAC5ER,GAAiBS,GAAI,GAAAC,QAAAC,EAAAA,EAAAA,GAAQF,GAAI,CAAEN,KAAiB,EAcmBS,WAXrDR,IAClBJ,GAAiBS,GAAQA,EAAKI,KAAIC,GAChCA,EAAMV,KAAOA,EAAK,IAAKU,EAAON,MAAM,GAASM,KAC7C,EAQiFC,kBAL1DX,IACzBJ,GAAiBS,GAAQA,EAAKO,QAAOF,GAASA,EAAMV,KAAOA,KAAI,IAK5DhB,EAC4B,ECpBnC,MAXsCD,IAAmB,IAAlB,SAAEC,GAAUD,EACjD,OACEO,EAAAA,cAACR,EAAwB,KACvBQ,EAAAA,cAACI,EAAoB,KAEnBJ,EAAAA,cAAA,YAAON,IAEgB,C,qGCU/B,MAZkDD,IAAe,IAAd,KAAE8B,GAAM9B,EACzD,OACEO,EAAAA,cAAA,WACEA,EAAAA,cAAA,UACEA,EAAAA,cAACwB,EAAAA,KAAI,CAACC,GAAI,SAASF,EAAKG,QAASH,EAAKI,QAExC3B,EAAAA,cAAA,SAAG,MAAIuB,EAAKK,OAAO,WAASL,EAAKM,MACjC7B,EAAAA,cAAA,SAAIuB,EAAKO,SACL,EC4BV,MAtBoDrC,IAAe,IAAd,KAAEsC,GAAMtC,EAC3D,MAAMuC,EAAQD,EAAKE,kBAAkBC,MAErC,OACElC,EAAAA,cAACmC,EAAAA,EAAM,KACLnC,EAAAA,cAAA,OAAK2B,MAAM,OAAOS,YAAY,mBAC9BpC,EAAAA,cAAA,UAAI,QACJA,EAAAA,cAAA,WACGgC,EAAMb,KAAIkB,IAAA,IAAC,KAAEC,GAAMD,EAAA,OAClBrC,EAAAA,cAACuC,EAAY,CACXC,IAAKF,EAAK5B,GACVa,KAAM,IACDe,EAAKG,YACRf,KAAMY,EAAKI,OAAOhB,OAEpB,KAGC,C","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/blog/BlogPostCard.tsx","webpack://gatsby-starter-default/./src/pages/blog.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/blog/BlogPostCard.tsx\r\n\r\nimport React from 'react'\r\nimport { Link } from 'gatsby'\r\n\r\ninterface BlogPostCardProps {\r\n  post: {\r\n    title: string\r\n    date: string\r\n    author: string\r\n    excerpt: string\r\n    slug: string\r\n  }\r\n}\r\n\r\nconst BlogPostCard: React.FC<BlogPostCardProps> = ({ post }) => {\r\n  return (\r\n    <div>\r\n      <h2>\r\n        <Link to={`/blog/${post.slug}`}>{post.title}</Link>\r\n      </h2>\r\n      <p>作者：{post.author} | 發布日期：{post.date}</p>\r\n      <p>{post.excerpt}</p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default BlogPostCard","// src/pages/blog.tsx\r\n\r\nimport React from 'react'\r\nimport { graphql, PageProps } from 'gatsby'\r\nimport Layout from '../components/Layout'\r\nimport seo from '../components/seo'\r\nimport BlogPostCard from '../components/blog/BlogPostCard'\r\n\r\ninterface BlogPost {\r\n  id: string\r\n  fields: {\r\n    slug: string\r\n  }\r\n  frontmatter: {\r\n    title: string\r\n    date: string\r\n    author: string\r\n    excerpt: string\r\n  }\r\n}\r\n\r\ninterface BlogPageData {\r\n  allMarkdownRemark: {\r\n    edges: Array<{\r\n      node: BlogPost\r\n    }>\r\n  }\r\n}\r\n\r\nconst BlogPage: React.FC<PageProps<BlogPageData>> = ({ data }) => {\r\n  const posts = data.allMarkdownRemark.edges\r\n\r\n  return (\r\n    <Layout>\r\n      <seo title=\"旅遊博客\" description=\"探索我們的旅遊文章和專家攻略\" />\r\n      <h1>旅遊博客</h1>\r\n      <div>\r\n        {posts.map(({ node }) => (\r\n          <BlogPostCard \r\n            key={node.id} \r\n            post={{\r\n              ...node.frontmatter, \r\n              slug: node.fields.slug\r\n            }} \r\n          />\r\n        ))}\r\n      </div>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BlogPage\r\n\r\nexport const query = graphql`\r\n  query {\r\n    allMarkdownRemark(\r\n      sort: { frontmatter: { date: DESC } }\r\n      filter: { fields: { slug: { regex: \"/blog/\" } } }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            author\r\n            excerpt\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","post","Link","to","slug","title","author","date","excerpt","data","posts","allMarkdownRemark","edges","Layout","description","_ref2","node","BlogPostCard","key","frontmatter","fields"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-booking-tsx-4922a574c751b92cbb26.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/booking/FlightSearch.tsx","webpack://gatsby-starter-default/./src/components/booking/HotelSearch.tsx","webpack://gatsby-starter-default/./src/components/booking/ActivitySearch.tsx","webpack://gatsby-starter-default/./src/components/booking/CarRentalSearch.tsx","webpack://gatsby-starter-default/./src/pages/booking.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/booking/FlightSearch.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\ninterface Flight {\r\n  id: string\r\n  airline: string\r\n  departureTime: string\r\n  arrivalTime: string\r\n  price: number\r\n}\r\n\r\ninterface QueryData {\r\n  allFlight: {\r\n    nodes: Flight[]\r\n  }\r\n}\r\n\r\nconst FlightSearch: React.FC = () => {\r\n  const [origin, setOrigin] = useState('')\r\n  const [destination, setDestination] = useState('')\r\n  const [departureDate, setDepartureDate] = useState('')\r\n  const [flights, setFlights] = useState<Flight[]>([])\r\n\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allFlight {\r\n        nodes {\r\n          id\r\n          airline\r\n          departureTime\r\n          arrivalTime\r\n          price\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleSearch = () => {\r\n    // 在實際應用中，這裡應該調用 API 進行搜索\r\n    // 現在我們只是模擬搜索結果\r\n    setFlights(data.allFlight.nodes)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>搜索航班</h2>\r\n      <input \r\n        type=\"text\" \r\n        value={origin} \r\n        onChange={(e) => setOrigin(e.target.value)} \r\n        placeholder=\"出發地\"\r\n      />\r\n      <input \r\n        type=\"text\" \r\n        value={destination} \r\n        onChange={(e) => setDestination(e.target.value)} \r\n        placeholder=\"目的地\"\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={departureDate} \r\n        onChange={(e) => setDepartureDate(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>搜索</button>\r\n      <ul>\r\n        {flights.map((flight) => (\r\n          <li key={flight.id}>\r\n            {flight.airline} - 出發時間：{flight.departureTime} - 到達時間：{flight.arrivalTime} - 價格：${flight.price}\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\n// 添加這行來導出組件\r\nexport default FlightSearch","// src/components/booking/HotelSearch.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\n\r\ninterface Hotel {\r\n  id: string\r\n  name: string\r\n  rating: number\r\n  price: number\r\n}\r\n\r\ninterface QueryData {\r\n  allHotel: {\r\n    nodes: Hotel[]\r\n  }\r\n}\r\n\r\nconst HotelSearch: React.FC = () => {\r\n  const [location, setLocation] = useState('')\r\n  const [checkIn, setCheckIn] = useState('')\r\n  const [checkOut, setCheckOut] = useState('')\r\n  const [hotels, setHotels] = useState<Hotel[]>([])\r\n\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allHotel {\r\n        nodes {\r\n          id\r\n          name\r\n          rating\r\n          price\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleSearch = () => {\r\n    // 在實際應用中，這裡應該調用 API 進行搜索\r\n    // 現在我們只是模擬搜索結果\r\n    setHotels(data.allHotel.nodes)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>搜索酒店</h2>\r\n      <input \r\n        type=\"text\" \r\n        value={location} \r\n        onChange={(e) => setLocation(e.target.value)} \r\n        placeholder=\"目的地\"\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={checkIn} \r\n        onChange={(e) => setCheckIn(e.target.value)}\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={checkOut} \r\n        onChange={(e) => setCheckOut(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>搜索</button>\r\n      <ul>\r\n        {hotels.map((hotel) => (\r\n          <li key={hotel.id}>\r\n            {hotel.name} - 評分：{hotel.rating} - 價格：${hotel.price}/晚\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HotelSearch","// src/components/booking/ActivitySearch.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\ninterface Activity {\r\n  id: string\r\n  name: string\r\n  description: string\r\n  price: number\r\n}\r\n\r\ninterface QueryData {\r\n  allActivity: {\r\n    nodes: Activity[]\r\n  }\r\n}\r\n\r\nconst ActivitySearch: React.FC = () => {\r\n  const [location, setLocation] = useState('')\r\n  const [date, setDate] = useState('')\r\n  const [activities, setActivities] = useState<Activity[]>([])\r\n\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allActivity {\r\n        nodes {\r\n          id\r\n          name\r\n          description\r\n          price\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleSearch = () => {\r\n    // 在實際應用中，這裡應該調用 API 進行搜索\r\n    // 現在我們只是模擬搜索結果\r\n    setActivities(data.allActivity.nodes)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>搜索活動</h2>\r\n      <input \r\n        type=\"text\" \r\n        value={location} \r\n        onChange={(e) => setLocation(e.target.value)} \r\n        placeholder=\"目的地\"\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={date} \r\n        onChange={(e) => setDate(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>搜索</button>\r\n      <ul>\r\n        {activities.map((activity) => (\r\n          <li key={activity.id}>\r\n            <h3>{activity.name}</h3>\r\n            <p>{activity.description}</p>\r\n            <p>價格：${activity.price}</p>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ActivitySearch","// src/components/booking/CarRentalSearch.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { graphql, useStaticQuery } from 'gatsby'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\ninterface Car {\r\n  id: string\r\n  make: string\r\n  model: string\r\n  price: number\r\n}\r\n\r\ninterface QueryData {\r\n  allCar: {\r\n    nodes: Car[]\r\n  }\r\n}\r\n\r\nconst CarRentalSearch: React.FC = () => {\r\n  const [pickupLocation, setPickupLocation] = useState('')\r\n  const [pickupDate, setPickupDate] = useState('')\r\n  const [returnDate, setReturnDate] = useState('')\r\n  const [cars, setCars] = useState<Car[]>([])\r\n\r\n  const data = useStaticQuery<QueryData>(graphql`\r\n    query {\r\n      allCar {\r\n        nodes {\r\n          id\r\n          make\r\n          model\r\n          price\r\n        }\r\n      }\r\n    }\r\n  `)\r\n\r\n  const handleSearch = () => {\r\n    // 在實際應用中，這裡應該調用 API 進行搜索\r\n    // 現在我們只是模擬搜索結果\r\n    setCars(data.allCar.nodes)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>搜索租車</h2>\r\n      <input \r\n        type=\"text\" \r\n        value={pickupLocation} \r\n        onChange={(e) => setPickupLocation(e.target.value)} \r\n        placeholder=\"取車地點\"\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={pickupDate} \r\n        onChange={(e) => setPickupDate(e.target.value)}\r\n      />\r\n      <input \r\n        type=\"date\" \r\n        value={returnDate} \r\n        onChange={(e) => setReturnDate(e.target.value)}\r\n      />\r\n      <button onClick={handleSearch}>搜索</button>\r\n      <ul>\r\n        {cars.map((car) => (\r\n          <li key={car.id}>\r\n            {car.make} {car.model} - 價格：${car.price}/天\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CarRentalSearch","// src/pages/booking.tsx\r\n\r\nimport React, { useState } from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Layout from '../components/Layout'\r\nimport seo from '../components/seo'\r\nimport FlightSearch from '../components/booking/FlightSearch'\r\nimport HotelSearch from '../components/booking/HotelSearch'\r\nimport ActivitySearch from '../components/booking/ActivitySearch'\r\nimport CarRentalSearch from '../components/booking/CarRentalSearch'\r\n\r\nconst BookingPage: React.FC = () => {\r\n  const [activeTab, setActiveTab] = useState<'flights' | 'hotels' | 'activities' | 'cars'>('flights')\r\n\r\n  return (\r\n    <Layout>\r\n      <seo title=\"預訂系統\" description=\"預訂您的航班、酒店、活動和租車\" />\r\n      <h1>預訂系統</h1>\r\n      <nav>\r\n        <button onClick={() => setActiveTab('flights')}>航班</button>\r\n        <button onClick={() => setActiveTab('hotels')}>酒店</button>\r\n        <button onClick={() => setActiveTab('activities')}>活動</button>\r\n        <button onClick={() => setActiveTab('cars')}>租車</button>\r\n      </nav>\r\n      {activeTab === 'flights' && <FlightSearch />}\r\n      {activeTab === 'hotels' && <HotelSearch />}\r\n      {activeTab === 'activities' && <ActivitySearch />}\r\n      {activeTab === 'cars' && <CarRentalSearch />}\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default BookingPage"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","FlightSearch","origin","setOrigin","destination","setDestination","departureDate","setDepartureDate","flights","setFlights","data","useStaticQuery","type","onChange","e","target","placeholder","onClick","handleSearch","allFlight","nodes","flight","key","airline","departureTime","arrivalTime","price","HotelSearch","location","setLocation","checkIn","setCheckIn","checkOut","setCheckOut","hotels","setHotels","allHotel","hotel","name","rating","ActivitySearch","date","setDate","activities","setActivities","allActivity","activity","description","CarRentalSearch","pickupLocation","setPickupLocation","pickupDate","setPickupDate","returnDate","setReturnDate","cars","setCars","allCar","car","make","model","BookingPage","activeTab","setActiveTab","Layout","title"],"sourceRoot":""}
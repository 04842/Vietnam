{"version":3,"file":"component---src-pages-customer-service-tsx-ac52cf67c60fb115aa9d.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/components/customer-service/LiveChat.tsx","webpack://gatsby-starter-default/./src/components/customer-service/FAQ.tsx","webpack://gatsby-starter-default/./src/components/customer-service/ContactForm.tsx","webpack://gatsby-starter-default/./src/components/customer-service/PhoneSupport.tsx","webpack://gatsby-starter-default/./src/pages/customer-service.tsx"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","// src/components/customer-service/LiveChat.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\nconst LiveChat: React.FC = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [messages, setMessages] = useState<string[]>([])\r\n  const [inputMessage, setInputMessage] = useState('')\r\n\r\n  const toggleChat = () => setIsOpen(!isOpen)\r\n\r\n  const sendMessage = (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    if (inputMessage.trim()) {\r\n      setMessages([...messages, `You: ${inputMessage}`])\r\n      setInputMessage('')\r\n      // 這裡應該發送消息到後端或客服系統\r\n      setTimeout(() => {\r\n        setMessages(prev => [...prev, \"Customer Service: Thanks for your message. How can I help you?\"])\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={toggleChat}>{isOpen ? '關閉聊天' : '開始聊天'}</button>\r\n      {isOpen && (\r\n        <div>\r\n          <div>\r\n            {messages.map((msg, index) => (\r\n              <p key={index}>{msg}</p>\r\n            ))}\r\n          </div>\r\n          <form onSubmit={sendMessage}>\r\n            <input\r\n              type=\"text\"\r\n              value={inputMessage}\r\n              onChange={(e) => setInputMessage(e.target.value)}\r\n              placeholder=\"輸入您的消息...\"\r\n            />\r\n            <button type=\"submit\">發送</button>\r\n          </form>\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LiveChat","// src/components/customer-service/FAQ.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\nconst faqData = [\r\n  {\r\n    question: \"如何更改或取消我的預訂？\",\r\n    answer: \"您可以在您的帳戶中的'我的預訂'部分找到更改或取消預訂的選項。請注意，某些預訂可能有特定的取消政策。\"\r\n  },\r\n  {\r\n    question: \"你們接受哪些支付方式？\",\r\n    answer: \"我們接受主要的信用卡（Visa、MasterCard、American Express）、PayPal和Apple Pay。\"\r\n  },\r\n  // 添加更多FAQ項目...\r\n]\r\n\r\nconst FAQ: React.FC = () => {\r\n  const [activeIndex, setActiveIndex] = useState<number | null>(null)\r\n\r\n  const toggleQuestion = (index: number) => {\r\n    setActiveIndex(activeIndex === index ? null : index)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>常見問題</h2>\r\n      {faqData.map((item, index) => (\r\n        <div key={index}>\r\n          <h3 onClick={() => toggleQuestion(index)}>{item.question}</h3>\r\n          {activeIndex === index && <p>{item.answer}</p>}\r\n        </div>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default FAQ","// src/components/customer-service/ContactForm.tsx\r\n\r\nimport React, { useState } from 'react'\r\n\r\nconst ContactForm: React.FC = () => {\r\n  const [name, setName] = useState('')\r\n  const [email, setEmail] = useState('')\r\n  const [message, setMessage] = useState('')\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault()\r\n    // 這裡應該實現實際的表單提交邏輯，包括與後端 API 的交互\r\n    console.log('提交表單:', { name, email, message })\r\n    // 重置表單\r\n    setName('')\r\n    setEmail('')\r\n    setMessage('')\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <h2>聯繫我們</h2>\r\n      <input\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={(e) => setName(e.target.value)}\r\n        placeholder=\"您的姓名\"\r\n        required\r\n      />\r\n      <input\r\n        type=\"email\"\r\n        value={email}\r\n        onChange={(e) => setEmail(e.target.value)}\r\n        placeholder=\"您的電子郵件\"\r\n        required\r\n      />\r\n      <textarea\r\n        value={message}\r\n        onChange={(e) => setMessage(e.target.value)}\r\n        placeholder=\"您的訊息\"\r\n        required\r\n      />\r\n      <button type=\"submit\">發送</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ContactForm","// src/components/customer-service/PhoneSupport.tsx\r\n\r\nimport React from 'react'\r\n\r\nconst phoneNumbers = [\r\n  { country: '台灣', number: '+886 2 1234 5678' },\r\n  { country: '香港', number: '+852 3456 7890' },\r\n  { country: '日本', number: '+81 3 1234 5678' },\r\n  // 添加更多國家和電話號碼...\r\n]\r\n\r\nconst PhoneSupport: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <h2>電話客服支持</h2>\r\n      <ul>\r\n        {phoneNumbers.map((item, index) => (\r\n          <li key={index}>\r\n            {item.country}: <a href={`tel:${item.number}`}>{item.number}</a>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default PhoneSupport","// src/pages/customer-service.tsx\r\n\r\nimport React from 'react'\r\nimport Layout from '../components/Layout'\r\nimport seo from '../components/seo'\r\nimport LiveChat from '../components/customer-service/LiveChat'\r\nimport FAQ from '../components/customer-service/FAQ'\r\nimport ContactForm from '../components/customer-service/ContactForm'\r\nimport PhoneSupport from '../components/customer-service/PhoneSupport'\r\n\r\nconst CustomerServicePage: React.FC = () => {\r\n  return (\r\n    <Layout>\r\n      <seo title=\"客戶服務\" description=\"獲取幫助和支持\" />\r\n      <h1>客戶服務</h1>\r\n      <LiveChat />\r\n      <FAQ />\r\n      <ContactForm />\r\n      <PhoneSupport />\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport default CustomerServicePage"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","LiveChat","isOpen","setIsOpen","messages","setMessages","inputMessage","setInputMessage","onClick","toggleChat","msg","index","key","onSubmit","e","preventDefault","trim","setTimeout","type","onChange","target","placeholder","faqData","question","answer","FAQ","activeIndex","setActiveIndex","item","toggleQuestion","ContactForm","name","setName","email","setEmail","message","setMessage","async","console","log","required","phoneNumbers","country","number","PhoneSupport","href","CustomerServicePage","Layout","title","description"],"sourceRoot":""}
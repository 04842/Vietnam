{"version":3,"file":"component---src-pages-using-ssr-js-a9ee7486c2f39c493f69.js","mappings":"mLAaA,MAAMA,GAA0BC,EAAAA,EAAAA,oBAAuDC,GAG1EC,EAA8DC,IAAmB,IAAlB,SAAEC,GAAUD,EAGtF,MAAM,EAACE,EAAS,EAACC,IAAeC,EAAAA,EAAAA,UAAS,UACnC,EAACC,EAAS,EAACC,IAAeF,EAAAA,EAAAA,UAAS,OAEzC,OACEG,EAAAA,cAACX,EAAwBY,SAAQ,CAACC,MAAO,CAAEP,WAAUC,cAAaE,WAAUC,gBACzEL,EACgC,E,cCPvC,MAAMS,GAAsBb,EAAAA,EAAAA,oBAAmDC,GAElEa,EAA0DX,IAAmB,IAAlB,SAAEC,GAAUD,EAClF,MAAM,EAACY,EAAc,EAACC,IAAoBT,EAAAA,EAAAA,UAAyB,IAiBnE,OACEG,EAAAA,cAACG,EAAoBF,SAAQ,CAACC,MAAO,CAAEG,gBAAeE,gBAhB/BC,IACvB,MAAMC,EAAkB,IAAKD,EAAcE,GAAIC,KAAKC,MAAMC,WAAYC,MAAM,GAC5ER,GAAiBS,GAAI,GAAAC,QAAAC,EAAAA,EAAAA,GAAQF,GAAI,CAAEN,KAAiB,EAcmBS,WAXrDR,IAClBJ,GAAiBS,GAAQA,EAAKI,KAAIC,GAChCA,EAAMV,KAAOA,EAAK,IAAKU,EAAON,MAAM,GAASM,KAC7C,EAQiFC,kBAL1DX,IACzBJ,GAAiBS,GAAQA,EAAKO,QAAOF,GAASA,EAAMV,KAAOA,KAAI,IAK5DhB,EAC4B,ECpBnC,MAXsCD,IAAmB,IAAlB,SAAEC,GAAUD,EACjD,OACEO,EAAAA,cAACR,EAAwB,KACvBQ,EAAAA,cAACI,EAAoB,KAEnBJ,EAAAA,cAAA,YAAON,IAEgB,C,mGCX/B,MA4Ba6B,EAAOA,IAAMvB,EAAAA,cAAA,OAAKwB,MAAM,cAErC,UA9BiB/B,IAAqB,IAApB,WAAEgC,GAAYhC,EAC9B,OACEO,EAAAA,cAAC0B,EAAAA,EAAM,KACL1B,EAAAA,cAAA,UAAI,gBACWA,EAAAA,cAAA,SAAG,yBAElBA,EAAAA,cAAA,SAAG,mHAE4C,IAC7CA,EAAAA,cAAA,YAAM,yCAA4C,KAEpDA,EAAAA,cAAA,OACE2B,MAAO,CAAEC,MAAO,QAASC,aAAc,wBACvCC,IAAI,eACJC,IAAKN,EAAWO,UAElBhC,EAAAA,cAAA,SAAG,kCAC+B,IAChCA,EAAAA,cAAA,KAAGiC,KAAK,oFAAmF,6CAEvF,KAGNjC,EAAAA,cAACkC,EAAAA,KAAI,CAACC,GAAG,KAAI,2BACN,C","sources":["webpack://gatsby-starter-default/./src/context/LanguageCurrencyContext.tsx","webpack://gatsby-starter-default/./src/context/NotificationContext.tsx","webpack://gatsby-starter-default/./src/components/Layout.tsx","webpack://gatsby-starter-default/./src/pages/using-ssr.js"],"sourcesContent":["// src/context/LanguageCurrencyContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n//import React, { createContext, useState, useContext, ReactNode, FC } from 'react'\r\n//import React, { createContext, useState, useContext, PropsWithChildren } from 'react'\r\n\r\ninterface LanguageCurrencyContextType {\r\n  language: string\r\n  setLanguage: (lang: string) => void\r\n  currency: string\r\n  setCurrency: (curr: string) => void\r\n}\r\n\r\nconst LanguageCurrencyContext = createContext<LanguageCurrencyContextType | undefined>(undefined)\r\n//export const LanguageCurrencyProvider: FC<{ children: ReactNode }> = ({ children }) => {\r\n\r\nexport const LanguageCurrencyProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n//export const LanguageCurrencyProvider: React.FC<PropsWithChildren<{}>> = ({ children }) => {\r\n\r\n  const [language, setLanguage] = useState('zh-TW')\r\n  const [currency, setCurrency] = useState('TWD')\r\n\r\n  return (\r\n    <LanguageCurrencyContext.Provider value={{ language, setLanguage, currency, setCurrency }}>\r\n      {children}\r\n    </LanguageCurrencyContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useLanguageCurrency = () => {\r\n  const context = useContext(LanguageCurrencyContext)\r\n  if (context === undefined) {\r\n    throw new Error('useLanguageCurrency must be used within a LanguageCurrencyProvider')\r\n  }\r\n  return context\r\n}","// src/context/NotificationContext.tsx\r\n\r\nimport React, { createContext, useState, useContext, ReactNode } from 'react'\r\n\r\ninterface Notification {\r\n  id: string\r\n  type: 'price' | 'itinerary' | 'system'\r\n  message: string\r\n  read: boolean\r\n}\r\n\r\ninterface NotificationContextType {\r\n  notifications: Notification[]\r\n  addNotification: (notification: Omit<Notification, 'id' | 'read'>) => void\r\n  markAsRead: (id: string) => void\r\n  clearNotification: (id: string) => void\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined)\r\n\r\nexport const NotificationProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [notifications, setNotifications] = useState<Notification[]>([])\r\n\r\n  const addNotification = (notification: Omit<Notification, 'id' | 'read'>) => {\r\n    const newNotification = { ...notification, id: Date.now().toString(), read: false }\r\n    setNotifications(prev => [...prev, newNotification])\r\n  }\r\n\r\n  const markAsRead = (id: string) => {\r\n    setNotifications(prev => prev.map(notif => \r\n      notif.id === id ? { ...notif, read: true } : notif\r\n    ))\r\n  }\r\n\r\n  const clearNotification = (id: string) => {\r\n    setNotifications(prev => prev.filter(notif => notif.id !== id))\r\n  }\r\n\r\n  return (\r\n    <NotificationContext.Provider value={{ notifications, addNotification, markAsRead, clearNotification }}>\r\n      {children}\r\n    </NotificationContext.Provider>\r\n  )\r\n}\r\n\r\nexport const useNotification = () => {\r\n  const context = useContext(NotificationContext)\r\n  if (context === undefined) {\r\n    throw new Error('useNotification must be used within a NotificationProvider')\r\n  }\r\n  return context\r\n}","// src/components/Layout.tsx\r\n\r\nimport React, { ReactNode } from 'react'\r\nimport { LanguageCurrencyProvider } from '../context/LanguageCurrencyContext'\r\nimport { NotificationProvider } from '../context/NotificationContext'\r\n\r\ninterface LayoutProps {\r\n  children: ReactNode\r\n}\r\n\r\nconst Layout: React.FC<LayoutProps> = ({ children }) => {\r\n  return (\r\n    <LanguageCurrencyProvider>\r\n      <NotificationProvider>\r\n        {/* 其他布局組件代碼 */}\r\n        <main>{children}</main>\r\n      </NotificationProvider>\r\n    </LanguageCurrencyProvider>\r\n  )\r\n}\r\n\r\nexport default Layout","import * as React from \"react\"\r\nimport { Link } from \"gatsby\"\r\n\r\nimport Layout from \"../components/Layout\"\r\nimport seo from \"../components/seo\"\r\n\r\nconst UsingSSR = ({ serverData }) => {\r\n  return (\r\n    <Layout>\r\n      <h1>\r\n        This page is <b>rendered server-side</b>\r\n      </h1>\r\n      <p>\r\n        This page is rendered server side every time the page is requested.\r\n        Reload it to see a(nother) random photo from{\" \"}\r\n        <code>dog.ceo/api/breed/shiba/images/random</code>:\r\n      </p>\r\n      <img\r\n        style={{ width: \"320px\", borderRadius: \"var(--border-radius)\" }}\r\n        alt=\"A random dog\"\r\n        src={serverData.message}\r\n      />\r\n      <p>\r\n        To learn more, head over to our{\" \"}\r\n        <a href=\"https://www.gatsbyjs.com/docs/reference/rendering-options/server-side-rendering/\">\r\n          documentation about Server Side Rendering\r\n        </a>\r\n        .\r\n      </p>\r\n      <Link to=\"/\">Go back to the homepage</Link>\r\n    </Layout>\r\n  )\r\n}\r\n\r\nexport const Head = () => <seo title=\"Using SSR\" />\r\n\r\nexport default UsingSSR\r\n\r\nexport async function getServerData() {\r\n  try {\r\n    const res = await fetch(`https://dog.ceo/api/breed/shiba/images/random`)\r\n    if (!res.ok) {\r\n      throw new Error(`Response failed`)\r\n    }\r\n    return {\r\n      props: await res.json(),\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      status: 500,\r\n      headers: {},\r\n      props: {},\r\n    }\r\n  }\r\n}\r\n"],"names":["LanguageCurrencyContext","createContext","undefined","LanguageCurrencyProvider","_ref","children","language","setLanguage","useState","currency","setCurrency","React","Provider","value","NotificationContext","NotificationProvider","notifications","setNotifications","addNotification","notification","newNotification","id","Date","now","toString","read","prev","concat","_toConsumableArray","markAsRead","map","notif","clearNotification","filter","Head","title","serverData","Layout","style","width","borderRadius","alt","src","message","href","Link","to"],"sourceRoot":""}